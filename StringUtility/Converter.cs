using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StringUtility
{
    public class Converter
    {
        /// <summary>
        /// accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number
        /// </summary>
        /// <param name="numbers">array of 10 integers (between 0 and 9)</param>
        /// <returns>string of those numbers in the form of a phone number</returns>
        public static string CreatePhoneNumber(int[] numbers)
        {
            //******************************************************** Solution M **************************************************************************************************
            return string.Format("({0}{1}{2}) {3}{4}{5}-{6}{7}{8}{9}", numbers.Select(x => x.ToString()).ToArray());
            //******************************************************** Solution M **************************************************************************************************


            //******************************************************** Solution 1 **************************************************************************************************
            //return long.Parse(string.Concat(numbers)).ToString("(000) 000-0000");
            //******************************************************** Solution 1 **************************************************************************************************

            //******************************************************** Solution 2 **************************************************************************************************
            // return "(" + n[0] + n[1] + n[2] + ") " + n[3] + n[4] + n[5] + "-" + n[6] + n[7] + n[8] + n[9];
            //******************************************************** Solution 2 **************************************************************************************************


            //******************************************************** Solution 3 **************************************************************************************************
            // new Regex("(...)(...)(....)").Replace(String.Concat(numbers), "($1) $2-$3");
            //******************************************************** Solution 1 **************************************************************************************************


            //******************************************************** Solution 3 **************************************************************************************************
            //return long.Parse(string.Concat(numbers)).ToString("(000) 000-0000");
            //******************************************************** Solution 1 **************************************************************************************************


            //******************************************************** Solution 4 **************************************************************************************************
            // new Regex("(...)(...)(....)").Replace(String.Concat(numbers), "($1) $2-$3");
            //******************************************************** Solution 4 **************************************************************************************************


            //******************************************************** Solution 5 **************************************************************************************************
            //String.Format("({0}) {1}-{2}",
            //numbers.Take(3).Select(n => n.ToString()).Aggregate((a, b) => a + b),
            //numbers.Skip(3).Take(3).Select(n => n.ToString()).Aggregate((a, b) => a + b),
            //numbers.Skip(6).Take(4).Select(n => n.ToString()).Aggregate((a, b) => a + b));
            //******************************************************** Solution 5 **************************************************************************************************
        }
    }
}
